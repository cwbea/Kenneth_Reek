 Reasons for Defining putchar as a Macro

    Speed Optimization (Avoids Function Call Overhead)

        A macro is inlined by the preprocessor—this avoids the overhead of a real function call 
         (such as pushing arguments to the stack and returning).

        Especially useful in tight loops or high-frequency I/O operations like:

    for (int i = 0; i < len; ++i) {
        putchar(buffer[i]);
    }

  Simpler Substitution for Hardware-Specific Implementations

    In embedded or system-specific C environments, putchar may directly map to a memory-mapped I/O register write, like:

        #define putchar(c) (*(volatile char*)0x4000 = (c))

        Using a macro allows hardware tuning without rewriting function bodies.
        Allows Inline Expansion and Compiler Optimizations

        Macros give the compiler more room to optimize code by seeing the actual logic instead of treating
        it as a black-box function call.
       
 Legacy C Practice

        In early C compilers, function calls were relatively expensive. Defining I/O functions like putchar 
        as macros was a common optimization pattern in standard libraries.

  Trade-off:

    Macros lack type checking and may cause side-effect issues if used carelessly:

    putchar(x++); // Might increment x more than once in a macro!

    So modern systems may instead prefer inline functions if available.

  Summary:

putchar is defined as a macro to maximize speed and adapt to system-specific I/O mechanics,
  despite being long—because in many real-world use cases, that trade-off is worth the gain in performance and flexibility.
