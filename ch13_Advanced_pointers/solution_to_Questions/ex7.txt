Advantages of getopt

    Simplifies command-line parsing
    getopt handles common tasks like:

        Detecting flags (e.g., -a, -b)

        Associating options with values (e.g., -f filename.txt)

        Managing optional and required arguments

        Skipping over unknown or malformed options (if desired)

    Standardized usage across programs
    Many Unix tools use similar patterns for command-line options, largely thanks to getopt. 
    This consistency makes it easier for users and developers.

    Reduces boilerplate code
    Without getopt, you'd need to manually loop through argv[], match strings, handle errors, 
    etc. getopt wraps that into a clean, reusable interface.

    Supports POSIX compatibility
    Even though getopt is not ANSI C, it's part of the POSIX standard, which is followed by most 
    Unix-like systems (Linux, macOS, etc.).

 Disadvantages of getopt

    Not part of the ANSI C Standard
    This means:

        Not available on some non-POSIX platforms (like Windows, unless using a POSIX emulation layer or a custom implementation).

        Less portable for purely standard C programs.

    Limited functionality

        Basic getopt only supports single-character options (e.g., -f, not --file).

        Doesn't natively handle long options (like GNU-style --help) unless you use getopt_long, which is GNU-specific.

    Global variables
    It uses several global variables like optarg, optind, and opterr, which can make debugging harder in large projects or multi-threaded contexts.

    Error handling is manual
    Developers must still check for invalid options and handle usage/help messages themselves.

 Summary

Feature	                 getopt
Availability		POSIX (not ANSI C)
Pros			Easy to use, consistent, widely supported on Unix/Linux, saves code
Cons			Not portable to all systems, limited to short options, uses global state
Alternative (Portable)	Manual parsing, custom libraries, or using GNU getopt_long on supported systems
