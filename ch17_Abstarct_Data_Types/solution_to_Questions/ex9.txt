This situation occurs due to the circular nature of the array and the way front and rear pointers are updated.
 In a circular array, both the empty and full conditions can cause front and rear to take on the same value, 
but they represent different conceptual states.

 Circular Array Behavior

In a circular array:

    front points to the first element in the queue.

    rear points to the last element inserted.

    Both are updated using modulo arithmetic to wrap around the array.

 The Ambiguity

    When the queue is empty, typically:

(rear + 1) % size == front

Or sometimes:

front == rear

if implemented that way.

When the queue is full, we might also have:

    (rear + 1) % size == front

So both conditions can result in the same pointer values, even though one means empty and 
the other means full.
 Conceptual Explanation

This happens because in a circular array, we are reusing the same index positions over and over 
as the queue cycles around. This causes front and rear to meet at the same place after a complete wraparound.

 Solution: Leave One Slot Empty

To solve this ambiguity:

    Always leave one slot unused.

    That way:

        Empty: front == (rear + 1) % size

        Full: (rear + 2) % size == front or (rear + 1) % size == front depending on implementation

This approach ensures that you can distinguish full and empty states by pointer values alone.
 Summary

Conceptually, this situation happens because:

    A circular buffer reuses indices, so the front and rear can be equal in both empty and full states.

    The solution is to sacrifice one array slot, allowing these two states to be distinguishable without extra flags or counters.
