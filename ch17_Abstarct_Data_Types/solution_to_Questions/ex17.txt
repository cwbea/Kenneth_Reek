Here's how you can rewrite the do_pre_order_traverse function to perform a post-order traversal of a binary tree.
 Original Pre-order Version (for reference):

static void
do_pre_order_traverse(TreeNode *current, void (*callback)(TREE_TYPE value))
{
    if (current != NULL) {
        callback(current->value);                      // Visit Root
        do_pre_order_traverse(current->left, callback);  // Traverse Left
        do_pre_order_traverse(current->right, callback); // Traverse Right
    }
}

 Rewritten for Post-order Traversal:

static void
do_post_order_traverse(TreeNode *current, void (*callback)(TREE_TYPE value))
{
    if (current != NULL) {
        do_post_order_traverse(current->left, callback);   // Traverse Left
        do_post_order_traverse(current->right, callback);  // Traverse Right
        callback(current->value);                          // Visit Root
    }
}

Optional: Public Interface

If you want to expose this traversal for use outside the module:

void
post_order_traverse(void (*callback)(TREE_TYPE value))
{
    do_post_order_traverse(tree, callback);
}
